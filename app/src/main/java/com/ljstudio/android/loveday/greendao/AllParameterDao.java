package com.ljstudio.android.loveday.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ljstudio.android.loveday.entity.AllParameter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_PARAMETER".
*/
public class AllParameterDao extends AbstractDao<AllParameter, Long> {

    public static final String TABLENAME = "ALL_PARAMETER";

    /**
     * Properties of entity AllParameter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParamId = new Property(1, String.class, "paramId", false, "PARAM_ID");
        public final static Property ParamName = new Property(2, String.class, "paramName", false, "PARAM_NAME");
        public final static Property ValueType = new Property(3, String.class, "valueType", false, "VALUE_TYPE");
        public final static Property Len = new Property(4, int.class, "len", false, "LEN");
        public final static Property DateTime = new Property(5, String.class, "dateTime", false, "DATE_TIME");
        public final static Property Value = new Property(6, String.class, "value", false, "VALUE");
    }


    public AllParameterDao(DaoConfig config) {
        super(config);
    }
    
    public AllParameterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_PARAMETER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PARAM_ID\" TEXT," + // 1: paramId
                "\"PARAM_NAME\" TEXT," + // 2: paramName
                "\"VALUE_TYPE\" TEXT," + // 3: valueType
                "\"LEN\" INTEGER NOT NULL ," + // 4: len
                "\"DATE_TIME\" TEXT," + // 5: dateTime
                "\"VALUE\" TEXT);"); // 6: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_PARAMETER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllParameter entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String paramId = entity.getParamId();
        if (paramId != null) {
            stmt.bindString(2, paramId);
        }
 
        String paramName = entity.getParamName();
        if (paramName != null) {
            stmt.bindString(3, paramName);
        }
 
        String valueType = entity.getValueType();
        if (valueType != null) {
            stmt.bindString(4, valueType);
        }
        stmt.bindLong(5, entity.getLen());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(6, dateTime);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(7, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllParameter entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String paramId = entity.getParamId();
        if (paramId != null) {
            stmt.bindString(2, paramId);
        }
 
        String paramName = entity.getParamName();
        if (paramName != null) {
            stmt.bindString(3, paramName);
        }
 
        String valueType = entity.getValueType();
        if (valueType != null) {
            stmt.bindString(4, valueType);
        }
        stmt.bindLong(5, entity.getLen());
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(6, dateTime);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(7, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AllParameter readEntity(Cursor cursor, int offset) {
        AllParameter entity = new AllParameter( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // paramId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // paramName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // valueType
            cursor.getInt(offset + 4), // len
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllParameter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParamId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParamName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValueType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLen(cursor.getInt(offset + 4));
        entity.setDateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AllParameter entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AllParameter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AllParameter entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
